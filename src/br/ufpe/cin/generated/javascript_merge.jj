/*
att@cin.ufpe.br: Modified to support JavaScript
gjcc@cin.ufpe.br: Modified to support Java 8:

Per Sreenivasa Viswanadha (as posted on the javacc user mailing list), the
original java 1.5 grammar is licensed under the BSD license, so this modified
grammar is also.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
    * Neither the name of the <ORGANIZATION> nor the names of its contributors
    may be used to endorse or promote products derived from this software without
    specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


options {
  /*UNICODE_INPUT = true;*/
  /*JAVA_UNICODE_ESCAPE = false;*/
  JAVA_UNICODE_ESCAPE = true;
  ERROR_REPORTING = true;
  STATIC = false;
}

PARSER_BEGIN(JavaScriptMergeParser)
package de.ovgu.cide.fstgen.parsers.generated_javascript_merge;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;

public class JavaScriptMergeParser extends AbstractFSTParser
{
 	public JavaScriptMergeParser(){}
}

PARSER_END(JavaScriptMergeParser)


/********************************************
 * THE JAVA TOKEN SPECIFICATION STARTS HERE *
 ********************************************/

/* WHITE SPACE */

SPECIAL_TOKEN :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
/*| "\ufffd"*/
}

/* COMMENTS */

MORE :
{
  "//" { input_stream.backup(2); } : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  < SINGLE_LINE_COMMENT: "//"(~["\n","\r"])* ("\n"|"\r"|"\r\n")? > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < FUNCTION: "function" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VAR: "var" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}


TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <BINARY_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] ((["_"])*["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])((["_"])*["0"-"9","a"-"f","A"-"F"])* >      
|
  < #BINARY_LITERAL: "0" ["b","B"] (["0"-"1"])((["_"])*["0"-"1"])* >   
|
  < #OCTAL_LITERAL: "0" ((["_"])*(["0"-"7"]))* >      
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])((["_"])*(["0"-"9"]))* "." ((["0"-"9"])((["_"])*(["0"-"9"]))*)* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])((["_"])*(["0"-"9"]))* (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])((["_"])*(["0"-"9"]))* <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])((["_"])*(["0"-"9"]))* (<EXPONENT>)? ["f","F","d","D"]
  >
  
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","u","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","u","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ELLIPSIS: "..." >
| < POINTER: "->" >
| < DIAMOND: "<>" >

}


TOKEN :
{
		/*< RUNSIGNEDSHIFT: ">>>" >
		{
		matchedToken.kind = GT;
		((Token.GTToken)matchedToken).realKind = RUNSIGNEDSHIFT;
		input_stream.backup(2);
		}
		| < RSIGNEDSHIFT: ">>" >
		{
		matchedToken.kind = GT;
		((Token.GTToken)matchedToken).realKind = RSIGNEDSHIFT;
		input_stream.backup(1);
		}
		|*/
		< GT: ">" >
}
FSTInfo CompilationUnit(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(n=SourceElement(inTerminal){ replaceName(n);})* <EOF> {return productionEndNonTerminal("CompilationUnit","-","-");}

 )  }

FSTInfo Id(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	t=<IDENTIFIER>{ replaceName(new FSTInfo("<IDENTIFIER>",t.image));} {return productionEndTerminal("Id","{<IDENTIFIER>}","{<IDENTIFIER>}","Replacement","Default",first,token);}

 )  }

FSTInfo SourceElement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Function(inTerminal){ replaceName(n);} n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} "(" n=FormalParameters(inTerminal){ replaceName(n);} ")" "{" n=FunctionBody(inTerminal){ replaceName(n);} "}" {return productionEndNonTerminal("SourceElement1","{Id}","{Id}");}
 |
	n=StatementList(inTerminal){ replaceName(n);} {return productionEndNonTerminal("SourceElement2","-","-");}

 )  }

FSTInfo FunctionDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Function(true){ replaceName(n);} n=Id(true){ replaceName(n);} "(" n=FormalParameters(true){ replaceName(n);} ")" "{" n=FunctionBody(true){ replaceName(n);} "}" {return productionEndTerminal("FunctionDeclaration","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Function(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"function"  {return productionEndTerminal("Function","-","-","Replacement","LineBased",first,token);}

 )  }

FSTInfo FormalParameters(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName(n);} ("," n=Id(true){ replaceName(n);})* {return productionEndTerminal("FormalParameters","-","-","Replacement","LineBased",first,token);}

 )  }

FSTInfo FunctionBody(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(n=SourceElement(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("FunctionBody","-","-");}

 )  }

FSTInfo StatementList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(LOOKAHEAD(2) n=Statement(true){ replaceName(n);})+ {return productionEndTerminal("StatementList","-","-","Replacement","LineBased",first,token);}

 )  }

FSTInfo Statement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=VariableStatement(true){ replaceName(n);} {return productionEndTerminal("Statement1","-","-","Replacement","Default",first,token);}
 |
	n=EmptyStatement(true){ replaceName(n);} {return productionEndTerminal("Statement2","-","-","Replacement","Default",first,token);}
 |
	n=ExpressionStatement(true){ replaceName(n);} {return productionEndTerminal("Statement3","-","-","Replacement","Default",first,token);}
 |
	n=ReturnStatement(true){ replaceName(n);} {return productionEndTerminal("Statement4","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo VariableStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"var" n=VariableDeclarationList(true){ replaceName(n);} [LOOKAHEAD(2) <SEMICOLON>] {return productionEndTerminal("VariableStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo VariableDeclarationList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=VariableDeclaration(true){ replaceName(n);} ("," n=VariableDeclaration(true){ replaceName(n);})* {return productionEndTerminal("VariableDeclarationList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo VariableDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName(n);} [n=Initializer(true){ replaceName(n);}] {return productionEndTerminal("VariableDeclaration","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Initializer(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"=" n=InitializerExpression(true){ replaceName(n);} {return productionEndTerminal("Initializer","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo InitializerExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(AssignmentExpression()) n=AssignmentExpression(true){ replaceName(n);} {return productionEndTerminal("InitializerExpression1","-","-","Replacement","Default",first,token);}
 |
	n=FunctionExpression(true){ replaceName(n);} {return productionEndTerminal("InitializerExpression2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo EmptyStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<SEMICOLON> {return productionEndTerminal("EmptyStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ExpressionStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Expression(true){ replaceName(n);} [LOOKAHEAD(2) <SEMICOLON>] {return productionEndTerminal("ExpressionStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Expression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AssignmentExpression(true){ replaceName(n);} ("," n=AssignmentExpression(true){ replaceName(n);})* {return productionEndTerminal("Expression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AssignmentExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(LeftHandSideExpression() AssignmentOperator()) n=LeftHandSideExpression(true){ replaceName(n);} n=AssignmentOperator(true){ replaceName(n);} n=AssignmentExpression(true){ replaceName(n);} {return productionEndTerminal("AssignmentExpression1","-","-","Replacement","Default",first,token);}
 |
	n=ConditionalExpression(true){ replaceName(n);} {return productionEndTerminal("AssignmentExpression2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo FunctionExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Function(true){ replaceName(n);} [n=Id(true){ replaceName(n);}] "(" [n=FormalParameters(true){ replaceName(n);}] ")" "{" n=FunctionBody(true){ replaceName(n);} "}" {return productionEndTerminal("FunctionExpression1","-","-","Replacement","Default",first,token);}
 |
	"(" n=FunctionExpression(true){ replaceName(n);} ")" {return productionEndTerminal("FunctionExpression2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo LeftHandSideExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(CallExpressionInternal() Arguments()) n=CallExpression(true){ replaceName(n);} {return productionEndTerminal("LeftHandSideExpression1","-","-","Replacement","Default",first,token);}
 |
	n=MemberExpression(true){ replaceName(n);} {return productionEndTerminal("LeftHandSideExpression2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CallExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=CallExpressionInternal(true){ replaceName(n);} n=Arguments(true){ replaceName(n);} (LOOKAHEAD(2) n=CallExpressionPart(true){ replaceName(n);})* {return productionEndTerminal("CallExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CallExpressionInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=MemberExpression(true){ replaceName(n);} {return productionEndTerminal("CallExpressionInternal1","-","-","Replacement","Default",first,token);}
 |
	"(" n=FunctionExpression(true){ replaceName(n);} ")" {return productionEndTerminal("CallExpressionInternal2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MemberExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=PrimaryExpression(true){ replaceName(n);} {return productionEndTerminal("MemberExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo PrimaryExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName(n);} {return productionEndTerminal("PrimaryExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Arguments(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" [n=ArgumentList(true){ replaceName(n);}] ")" {return productionEndTerminal("Arguments","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ArgumentList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Argument(true){ replaceName(n);} ("," n=Argument(true){ replaceName(n);})* {return productionEndTerminal("ArgumentList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Argument(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(AssignmentExpression()) n=AssignmentExpression(true){ replaceName(n);} {return productionEndTerminal("Argument1","-","-","Replacement","Default",first,token);}
 |
	n=FunctionExpression(true){ replaceName(n);} {return productionEndTerminal("Argument2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CallExpressionPart(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Arguments(true){ replaceName(n);} {return productionEndTerminal("CallExpressionPart1","-","-","Replacement","Default",first,token);}
 |
	"[" n=Expression(true){ replaceName(n);} "]" {return productionEndTerminal("CallExpressionPart2","-","-","Replacement","Default",first,token);}
 |
	"." n=Id(true){ replaceName(n);} {return productionEndTerminal("CallExpressionPart3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AssignmentOperator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"="  {return productionEndTerminal("AssignmentOperator1","-","-","Replacement","Default",first,token);}
 |
	"*="  {return productionEndTerminal("AssignmentOperator2","-","-","Replacement","Default",first,token);}
 |
	"/="  {return productionEndTerminal("AssignmentOperator3","-","-","Replacement","Default",first,token);}
 |
	"%="  {return productionEndTerminal("AssignmentOperator4","-","-","Replacement","Default",first,token);}
 |
	"+="  {return productionEndTerminal("AssignmentOperator5","-","-","Replacement","Default",first,token);}
 |
	"-="  {return productionEndTerminal("AssignmentOperator6","-","-","Replacement","Default",first,token);}
 |
	"<<="  {return productionEndTerminal("AssignmentOperator7","-","-","Replacement","Default",first,token);}
 |
	">>="  {return productionEndTerminal("AssignmentOperator8","-","-","Replacement","Default",first,token);}
 |
	">>>="  {return productionEndTerminal("AssignmentOperator9","-","-","Replacement","Default",first,token);}
 |
	"&="  {return productionEndTerminal("AssignmentOperator10","-","-","Replacement","Default",first,token);}
 |
	"^="  {return productionEndTerminal("AssignmentOperator11","-","-","Replacement","Default",first,token);}
 |
	"|="  {return productionEndTerminal("AssignmentOperator12","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ConditionalExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=LogicalORExpression(true){ replaceName(n);} {return productionEndTerminal("ConditionalExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo LogicalORExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=LogicalANDExpression(true){ replaceName(n);} {return productionEndTerminal("LogicalORExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo LogicalANDExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=BitwiseORExpression(true){ replaceName(n);} {return productionEndTerminal("LogicalANDExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo BitwiseORExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=BitwiseXORExpression(true){ replaceName(n);} {return productionEndTerminal("BitwiseORExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo BitwiseXORExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=BitwiseANDExpression(true){ replaceName(n);} {return productionEndTerminal("BitwiseXORExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo BitwiseANDExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=EqualityExpression(true){ replaceName(n);} {return productionEndTerminal("BitwiseANDExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo EqualityExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=RelationalExpression(true){ replaceName(n);} {return productionEndTerminal("EqualityExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RelationalExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ShiftExpression(true){ replaceName(n);} {return productionEndTerminal("RelationalExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ShiftExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AdditiveExpression(true){ replaceName(n);} {return productionEndTerminal("ShiftExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AdditiveExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=MultiplicativeExpression(true){ replaceName(n);} (LOOKAHEAD(2) n=AdditiveExpressionInternal(true){ replaceName(n);})* {return productionEndTerminal("AdditiveExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AdditiveExpressionInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AdditiveOperator(true){ replaceName(n);} n=MultiplicativeExpression(true){ replaceName(n);} {return productionEndTerminal("AdditiveExpressionInternal","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MultiplicativeExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=UnaryExpression(true){ replaceName(n);} {return productionEndTerminal("MultiplicativeExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo UnaryExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=PostfixExpression(true){ replaceName(n);} {return productionEndTerminal("UnaryExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo PostfixExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=LeftHandSideExpression(true){ replaceName(n);} [n=PostfixOperator(true){ replaceName(n);}] {return productionEndTerminal("PostfixExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo PostfixOperator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"++"  {return productionEndTerminal("PostfixOperator1","-","-","Replacement","Default",first,token);}
 |
	"--"  {return productionEndTerminal("PostfixOperator2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AdditiveOperator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"+"  {return productionEndTerminal("AdditiveOperator1","-","-","Replacement","Default",first,token);}
 |
	"-"  {return productionEndTerminal("AdditiveOperator2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ReturnStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"return" [LOOKAHEAD(2) n=ReturnExpression(true){ replaceName(n);}] [LOOKAHEAD(2) <SEMICOLON>] {return productionEndTerminal("ReturnStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ReturnExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(Expression()) n=Expression(true){ replaceName(n);} {return productionEndTerminal("ReturnExpression1","-","-","Replacement","Default",first,token);}
 |
	n=FunctionExpression(true){ replaceName(n);} {return productionEndTerminal("ReturnExpression2","-","-","Replacement","Default",first,token);}

 )  }

