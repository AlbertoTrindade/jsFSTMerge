/* Generated By:JavaCC: Do not edit this line. JavaScriptMergeParser.java */
package br.ufpe.cin.generated;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;

public class JavaScriptMergeParser extends AbstractFSTParser implements JavaScriptMergeParserConstants {
        public JavaScriptMergeParser(){}

  final public FSTInfo CompilationUnit(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case CONTINUE:
      case DELETE:
      case FOR:
      case FUNCTION:
      case IF:
      case NEW:
      case RETURN:
      case THIS:
      case TYPEOF:
      case VAR:
      case VOID:
      case WHILE:
      case WITH:
      case DO:
      case SWITCH:
      case THROW:
      case TRY:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n = SourceElement(inTerminal);
                                      replaceName(n);
    }
    jj_consume_token(0);
                                                                {if (true) return productionEndNonTerminal("CompilationUnit","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo SourceElement(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
      n = Function(inTerminal);
                                replaceName(n);
      n = Id(inTerminal);
                                                                   replaceName("Id", n);
                                                                                           replaceName(n);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER_NAME:
        n = FormalParameters(inTerminal);
                                                                                                                                                 replaceName(n);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      n = FunctionBody(inTerminal);
                                                                                                                                                                                                       replaceName(n);
      jj_consume_token(RBRACE);
                                                                                                                                                                                                                             {if (true) return productionEndNonTerminal("FuncDeclaration","{Id}","{Id}");}
      break;
    case BREAK:
    case CONTINUE:
    case DELETE:
    case FOR:
    case IF:
    case NEW:
    case RETURN:
    case THIS:
    case TYPEOF:
    case VAR:
    case VOID:
    case WHILE:
    case WITH:
    case DO:
    case SWITCH:
    case THROW:
    case TRY:
    case LBRACE:
    case LPAREN:
    case LBRACKET:
    case SEMICOLON:
    case PLUS:
    case MINUS:
    case INCR:
    case DECR:
    case BANG:
    case TILDE:
    case DECIMAL_LITERAL:
    case HEX_INTEGER_LITERAL:
    case NULL_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER_NAME:
    case REGULAR_EXPRESSION_LITERAL:
      n = StatementList(inTerminal);
                                     replaceName(n);
                                                       {if (true) return productionEndNonTerminal("StmtList","-","-");}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FunctionDeclaration(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Function(true);
                          replaceName(n);
    n = Id(true);
                                                       replaceName(n);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER_NAME:
      n = FormalParameters(true);
                                                                                                       replaceName(n);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    n = FunctionBody(true);
                                                                                                                                                       replaceName(n);
    jj_consume_token(RBRACE);
                                                                                                                                                                             {if (true) return productionEndTerminal("FunctionDeclaration","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Function(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(FUNCTION);
                     {if (true) return productionEndTerminal("Function","-","-","Replacement","LineBased",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Id(boolean inTerminal) throws ParseException {
                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    t = jj_consume_token(IDENTIFIER_NAME);
                             replaceName(new FSTInfo("<IDENTIFIER_NAME>",t.image));
                                                                                      {if (true) return productionEndTerminal("Id","{<IDENTIFIER_NAME>}","{<IDENTIFIER_NAME>}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FormalParameters(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Id(true);
                    replaceName(n);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      n = Id(true);
                                                      replaceName(n);
    }
                                                                          {if (true) return productionEndTerminal("FormalParameters","-","-","Replacement","LineBased",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FunctionBody(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case CONTINUE:
      case DELETE:
      case FOR:
      case FUNCTION:
      case IF:
      case NEW:
      case RETURN:
      case THIS:
      case TYPEOF:
      case VAR:
      case VOID:
      case WHILE:
      case WITH:
      case DO:
      case SWITCH:
      case THROW:
      case TRY:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      n = SourceElement(inTerminal);
                                      replaceName(n);
    }
                                                          {if (true) return productionEndNonTerminal("FunctionBody","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo StatementList(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_4:
    while (true) {
      n = Statement(true);
                                         replaceName(n);
      if (jj_2_1(2)) {
        ;
      } else {
        break label_4;
      }
    }
                                                             {if (true) return productionEndTerminal("StatementList","-","-","Replacement","LineBased",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Statement(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_2(2147483647)) {
      n = Block(true);
                                          replaceName(n);
                                                            {if (true) return productionEndTerminal("Statement1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        n = VariableStatement(true);
                                   replaceName(n);
                                                     {if (true) return productionEndTerminal("Statement2","-","-","Replacement","Default",first,token);}
        break;
      case SEMICOLON:
        n = EmptyStatement(true);
                                replaceName(n);
                                                  {if (true) return productionEndTerminal("Statement3","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[6] = jj_gen;
        if (jj_2_3(2147483647)) {
          n = LabelledStatement(true);
                                                       replaceName(n);
                                                                         {if (true) return productionEndTerminal("Statement4","-","-","Replacement","Default",first,token);}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DELETE:
          case NEW:
          case THIS:
          case TYPEOF:
          case VOID:
          case LBRACE:
          case LPAREN:
          case LBRACKET:
          case PLUS:
          case MINUS:
          case INCR:
          case DECR:
          case BANG:
          case TILDE:
          case DECIMAL_LITERAL:
          case HEX_INTEGER_LITERAL:
          case NULL_LITERAL:
          case BOOLEAN_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER_NAME:
          case REGULAR_EXPRESSION_LITERAL:
            n = ExpressionStatement(true);
                                     replaceName(n);
                                                       {if (true) return productionEndTerminal("Statement5","-","-","Replacement","Default",first,token);}
            break;
          case IF:
            n = IfStatement(true);
                             replaceName(n);
                                               {if (true) return productionEndTerminal("Statement6","-","-","Replacement","Default",first,token);}
            break;
          case FOR:
          case WHILE:
          case DO:
            n = IterationStatement(true);
                                    replaceName(n);
                                                      {if (true) return productionEndTerminal("Statement7","-","-","Replacement","Default",first,token);}
            break;
          case CONTINUE:
            n = ContinueStatement(true);
                                   replaceName(n);
                                                     {if (true) return productionEndTerminal("Statement8","-","-","Replacement","Default",first,token);}
            break;
          case BREAK:
            n = BreakStatement(true);
                                replaceName(n);
                                                  {if (true) return productionEndTerminal("Statement9","-","-","Replacement","Default",first,token);}
            break;
          case RETURN:
            n = ReturnStatement(true);
                                 replaceName(n);
                                                   {if (true) return productionEndTerminal("Statement10","-","-","Replacement","Default",first,token);}
            break;
          case WITH:
            n = WithStatement(true);
                               replaceName(n);
                                                 {if (true) return productionEndTerminal("Statement11","-","-","Replacement","Default",first,token);}
            break;
          case SWITCH:
            n = SwitchStatement(true);
                                 replaceName(n);
                                                   {if (true) return productionEndTerminal("Statement12","-","-","Replacement","Default",first,token);}
            break;
          case THROW:
            n = ThrowStatement(true);
                                replaceName(n);
                                                  {if (true) return productionEndTerminal("Statement13","-","-","Replacement","Default",first,token);}
            break;
          case TRY:
            n = TryStatement(true);
                              replaceName(n);
                                                {if (true) return productionEndTerminal("Statement14","-","-","Replacement","Default",first,token);}
            break;
          default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Block(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case CONTINUE:
      case DELETE:
      case FOR:
      case FUNCTION:
      case IF:
      case NEW:
      case RETURN:
      case THIS:
      case TYPEOF:
      case VAR:
      case VOID:
      case WHILE:
      case WITH:
      case DO:
      case SWITCH:
      case THROW:
      case TRY:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      n = SourceElement(true);
                                    replaceName(n);
    }
    jj_consume_token(RBRACE);
                                                            {if (true) return productionEndTerminal("Block","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo VariableStatement(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(VAR);
    n = VariableDeclarationList(true);
                                               replaceName(n);
    if (jj_2_4(2)) {
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
                                                                                            {if (true) return productionEndTerminal("VariableStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo VariableDeclarationList(boolean inTerminal) throws ParseException {
                                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = VariableDeclaration(true);
                                     replaceName(n);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      n = VariableDeclaration(true);
                                                                                        replaceName(n);
    }
                                                                                                            {if (true) return productionEndTerminal("VariableDeclarationList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo VariableDeclaration(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Id(true);
                    replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      n = Initializer(true);
                                                           replaceName(n);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
                                                                              {if (true) return productionEndTerminal("VariableDeclaration","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Initializer(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(ASSIGN);
    n = InitializerExpression(true);
                                           replaceName(n);
                                                             {if (true) return productionEndTerminal("Initializer","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo InitializerExpression(boolean inTerminal) throws ParseException {
                                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_5(2147483647)) {
      n = AssignmentExpression(true);
                                                                        replaceName(n);
                                                                                          {if (true) return productionEndTerminal("InitializerExpression1","-","-","Replacement","Default",first,token);}
    } else if (jj_2_6(2147483647)) {
      n = FunctionExpression(true);
                                                                                replaceName(n);
      n = CallExpressionArguments(true);
                                                                                                                                  replaceName(n);
                                                                                                                                                    {if (true) return productionEndTerminal("InitializerExpression2","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case LPAREN:
        n = FunctionExpression(true);
                                    replaceName(n);
                                                      {if (true) return productionEndTerminal("InitializerExpression3","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo EmptyStatement(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(SEMICOLON);
                     {if (true) return productionEndTerminal("EmptyStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo LabelledStatement(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Id(true);
                    replaceName(n);
    jj_consume_token(COLON);
    n = Statement(true);
                                                            replaceName(n);
                                                                              {if (true) return productionEndTerminal("LabelledStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ExpressionStatement(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Expression(true);
                            replaceName(n);
    if (jj_2_7(2)) {
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
                                                                         {if (true) return productionEndTerminal("ExpressionStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Expression(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = AssignmentExpression(true);
                                      replaceName(n);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      n = AssignmentExpression(true);
                                                                                          replaceName(n);
    }
                                                                                                              {if (true) return productionEndTerminal("Expression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AssignmentExpression(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_8(2147483647)) {
      n = LeftHandSideExpression(true);
                                                                                                 replaceName(n);
      n = AssignmentOperator(true);
                                                                                                                                              replaceName(n);
      n = AssignmentExpressionInternal(true);
                                                                                                                                                                                                     replaceName(n);
                                                                                                                                                                                                                       {if (true) return productionEndTerminal("AssignmentExpression1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELETE:
      case NEW:
      case THIS:
      case TYPEOF:
      case VOID:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
        n = ConditionalExpression(true);
                                       replaceName(n);
                                                         {if (true) return productionEndTerminal("AssignmentExpression2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AssignmentExpressionInternal(boolean inTerminal) throws ParseException {
                                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_9(2147483647)) {
      n = FunctionExpression(true);
                                                                                replaceName(n);
      n = CallExpressionArguments(true);
                                                                                                                                  replaceName(n);
                                                                                                                                                    {if (true) return productionEndTerminal("AssignmentExpressionInternal1","-","-","Replacement","Default",first,token);}
    } else if (jj_2_10(2147483647)) {
      n = AssignmentExpression(true);
                                                                        replaceName(n);
                                                                                          {if (true) return productionEndTerminal("AssignmentExpressionInternal2","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case LPAREN:
        n = FunctionExpression(true);
                                    replaceName(n);
                                                      {if (true) return productionEndTerminal("AssignmentExpressionInternal3","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FunctionExpression(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
      n = Function(true);
                          replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER_NAME:
        n = Id(true);
                                                        replaceName(n);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER_NAME:
        n = FormalParameters(true);
                                                                                                         replaceName(n);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      n = FunctionBody(true);
                                                                                                                                                         replaceName(n);
      jj_consume_token(RBRACE);
                                                                                                                                                                               {if (true) return productionEndTerminal("FunctionExpression1","-","-","Replacement","Default",first,token);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      n = FunctionExpression(true);
                                        replaceName(n);
      jj_consume_token(RPAREN);
                                                              {if (true) return productionEndTerminal("FunctionExpression2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo LeftHandSideExpression(boolean inTerminal) throws ParseException {
                                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_11(2147483647)) {
      n = CallExpression(true);
                                                                                replaceName(n);
                                                                                                  {if (true) return productionEndTerminal("LeftHandSideExpression1","-","-","Replacement","Default",first,token);}
    } else if (jj_2_12(2147483647)) {
      n = CallExpressionIIFECrockford(true);
                                                                                 replaceName(n);
                                                                                                   {if (true) return productionEndTerminal("LeftHandSideExpression2","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case THIS:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
        n = MemberExpression(true);
                                  replaceName(n);
                                                    {if (true) return productionEndTerminal("LeftHandSideExpression3","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CallExpression(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = CallExpressionInternal(true);
                                        replaceName(n);
    n = CallExpressionArguments(true);
                                                                                          replaceName(n);
                                                                                                            {if (true) return productionEndTerminal("CallExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CallExpressionInternal(boolean inTerminal) throws ParseException {
                                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_14(3)) {
      n = MemberExpression(true);
                                               replaceName(n);
                                                                 {if (true) return productionEndTerminal("CallExpressionInternal1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        n = FunctionExpression(true);
                                        replaceName(n);
        jj_consume_token(RPAREN);
        label_8:
        while (true) {
          if (jj_2_13(2)) {
            ;
          } else {
            break label_8;
          }
          n = MemberExpressionPart(true);
                                                                                                         replaceName(n);
        }
                                                                                                                             {if (true) return productionEndTerminal("CallExpressionInternal2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CallExpressionArguments(boolean inTerminal) throws ParseException {
                                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Arguments(true);
                           replaceName(n);
    label_9:
    while (true) {
      if (jj_2_15(2)) {
        ;
      } else {
        break label_9;
      }
      n = CallExpressionPart(true);
                                                                                      replaceName(n);
    }
                                                                                                          {if (true) return productionEndTerminal("CallExpressionArguments","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CallExpressionIIFECrockford(boolean inTerminal) throws ParseException {
                                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LPAREN);
    n = FunctionExpression(true);
                                        replaceName(n);
    n = CallExpressionArguments(true);
                                                                                          replaceName(n);
    jj_consume_token(RPAREN);
                                                                                                                {if (true) return productionEndTerminal("CallExpressionIIFECrockford","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo MemberExpression(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
    case LBRACE:
    case LPAREN:
    case LBRACKET:
    case DECIMAL_LITERAL:
    case HEX_INTEGER_LITERAL:
    case NULL_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER_NAME:
    case REGULAR_EXPRESSION_LITERAL:
      n = PrimaryExpression(true);
                                   replaceName(n);
      label_10:
      while (true) {
        if (jj_2_16(2)) {
          ;
        } else {
          break label_10;
        }
        n = MemberExpressionPart(true);
                                                                                                replaceName(n);
      }
                                                                                                                    {if (true) return productionEndTerminal("MemberExpression1","-","-","Replacement","Default",first,token);}
      break;
    case NEW:
      n = AllocationExpression(true);
                                      replaceName(n);
                                                        {if (true) return productionEndTerminal("MemberExpression2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PrimaryExpression(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
      jj_consume_token(THIS);
                 {if (true) return productionEndTerminal("PrimaryExpression1","-","-","Replacement","Default",first,token);}
      break;
    case LBRACE:
      n = ObjectLiteral(true);
                               replaceName(n);
                                                 {if (true) return productionEndTerminal("PrimaryExpression2","-","-","Replacement","Default",first,token);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      n = Expression(true);
                                replaceName(n);
      jj_consume_token(RPAREN);
                                                      {if (true) return productionEndTerminal("PrimaryExpression3","-","-","Replacement","Default",first,token);}
      break;
    case IDENTIFIER_NAME:
      n = Id(true);
                    replaceName(n);
                                      {if (true) return productionEndTerminal("PrimaryExpression4","-","-","Replacement","Default",first,token);}
      break;
    case LBRACKET:
      n = ArrayLiteral(true);
                              replaceName(n);
                                                {if (true) return productionEndTerminal("PrimaryExpression5","-","-","Replacement","Default",first,token);}
      break;
    case DECIMAL_LITERAL:
    case HEX_INTEGER_LITERAL:
    case NULL_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case REGULAR_EXPRESSION_LITERAL:
      n = Literal(true);
                         replaceName(n);
                                           {if (true) return productionEndTerminal("PrimaryExpression6","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ObjectLiteral(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER_NAME:
      n = PropertyNameAndValueList(true);
                                               replaceName(n);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
                                                                      {if (true) return productionEndTerminal("ObjectLiteral","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PropertyNameAndValueList(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = PropertyNameAndValue(true);
                                      replaceName(n);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_11;
      }
      n = PropertyNameAndValueListInternal(true);
                                                                                                  replaceName(n);
    }
                                                                                                                      {if (true) return productionEndTerminal("PropertyNameAndValueList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PropertyNameAndValueListInternal(boolean inTerminal) throws ParseException {
                                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_17(2)) {
      jj_consume_token(COMMA);
      n = PropertyNameAndValue(true);
                                                       replaceName(n);
                                                                         {if (true) return productionEndTerminal("PropertyNameAndValueListInternal1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
              {if (true) return productionEndTerminal("PropertyNameAndValueListInternal2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PropertyNameAndValue(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = PropertyName(true);
                              replaceName(n);
    jj_consume_token(COLON);
    n = PropertyValue(true);
                                                                          replaceName(n);
                                                                                            {if (true) return productionEndTerminal("PropertyNameAndValue","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PropertyValue(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_18(2147483647)) {
      n = AssignmentExpression(true);
                                                                        replaceName(n);
                                                                                          {if (true) return productionEndTerminal("PropertyValue1","-","-","Replacement","Default",first,token);}
    } else if (jj_2_19(2147483647)) {
      n = FunctionExpression(true);
                                                                                replaceName(n);
      n = CallExpressionArguments(true);
                                                                                                                                  replaceName(n);
                                                                                                                                                    {if (true) return productionEndTerminal("PropertyValue2","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case LPAREN:
        n = FunctionExpression(true);
                                    replaceName(n);
                                                      {if (true) return productionEndTerminal("PropertyValue3","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PropertyName(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER_NAME:
      n = Id(true);
                    replaceName(n);
                                      {if (true) return productionEndTerminal("PropertyName1","-","-","Replacement","Default",first,token);}
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
                          {if (true) return productionEndTerminal("PropertyName2","-","-","Replacement","Default",first,token);}
      break;
    case DECIMAL_LITERAL:
      jj_consume_token(DECIMAL_LITERAL);
                           {if (true) return productionEndTerminal("PropertyName3","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ArrayLiteral(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACKET);
    n = ArrayLiteralInternal(true);
                                          replaceName(n);
                                                            {if (true) return productionEndTerminal("ArrayLiteral","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ArrayLiteralInternal(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_20(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        n = Elision(true);
                                       replaceName(n);
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
                                                              {if (true) return productionEndTerminal("ArrayLiteralInternal1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELETE:
      case FUNCTION:
      case NEW:
      case THIS:
      case TYPEOF:
      case VOID:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case COMMA:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
        n = ElementList(true);
                             replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          n = Elision(true);
                                                                replaceName(n);
          break;
        default:
          jj_la1[28] = jj_gen;
          ;
        }
        jj_consume_token(RBRACKET);
                                                                                       {if (true) return productionEndTerminal("ArrayLiteralInternal2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ElementList(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      n = Elision(true);
                          replaceName(n);
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    n = Element(true);
                                                             replaceName(n);
    label_12:
    while (true) {
      if (jj_2_21(2)) {
        ;
      } else {
        break label_12;
      }
      n = ElementListInternal(true);
                                                                                                                         replaceName(n);
    }
                                                                                                                                             {if (true) return productionEndTerminal("ElementList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ElementListInternal(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Elision(true);
                         replaceName(n);
    n = Element(true);
                                                           replaceName(n);
                                                                             {if (true) return productionEndTerminal("ElementListInternal","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Elision(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_13:
    while (true) {
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_13;
      }
    }
                    {if (true) return productionEndTerminal("Elision","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Element(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_22(2147483647)) {
      n = AssignmentExpression(true);
                                                                        replaceName(n);
                                                                                          {if (true) return productionEndTerminal("Element1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case LPAREN:
        n = FunctionExpression(true);
                                    replaceName(n);
                                                      {if (true) return productionEndTerminal("Element2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Literal(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL_LITERAL:
      jj_consume_token(DECIMAL_LITERAL);
                           {if (true) return productionEndTerminal("Literal1","-","-","Replacement","Default",first,token);}
      break;
    case HEX_INTEGER_LITERAL:
      jj_consume_token(HEX_INTEGER_LITERAL);
                               {if (true) return productionEndTerminal("Literal2","-","-","Replacement","Default",first,token);}
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
                          {if (true) return productionEndTerminal("Literal3","-","-","Replacement","Default",first,token);}
      break;
    case BOOLEAN_LITERAL:
      jj_consume_token(BOOLEAN_LITERAL);
                           {if (true) return productionEndTerminal("Literal4","-","-","Replacement","Default",first,token);}
      break;
    case NULL_LITERAL:
      jj_consume_token(NULL_LITERAL);
                        {if (true) return productionEndTerminal("Literal5","-","-","Replacement","Default",first,token);}
      break;
    case REGULAR_EXPRESSION_LITERAL:
      jj_consume_token(REGULAR_EXPRESSION_LITERAL);
                                      {if (true) return productionEndTerminal("Literal6","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo MemberExpressionPart(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      n = Expression(true);
                                replaceName(n);
      jj_consume_token(RBRACKET);
                                                      {if (true) return productionEndTerminal("MemberExpressionPart1","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[34] = jj_gen;
      if (jj_2_23(2)) {
        jj_consume_token(DOT);
        n = Id(true);
                                     replaceName(n);
                                                       {if (true) return productionEndTerminal("MemberExpressionPart2","-","-","Replacement","Default",first,token);}
      } else if (jj_2_24(2)) {
        jj_consume_token(DOT);
        jj_consume_token(_DEFAULT);
                                     {if (true) return productionEndTerminal("MemberExpressionPart3","-","-","Replacement","Default",first,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          jj_consume_token(CLASS);
                     {if (true) return productionEndTerminal("MemberExpressionPart4","-","-","Replacement","Default",first,token);}
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AllocationExpression(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(NEW);
    n = MemberExpression(true);
                                        replaceName(n);
    label_14:
    while (true) {
      if (jj_2_25(2)) {
        ;
      } else {
        break label_14;
      }
      n = AllocationExpressionInternal(true);
                                                                                                             replaceName(n);
    }
                                                                                                                                 {if (true) return productionEndTerminal("AllocationExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AllocationExpressionInternal(boolean inTerminal) throws ParseException {
                                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Arguments(true);
                           replaceName(n);
    label_15:
    while (true) {
      if (jj_2_26(2)) {
        ;
      } else {
        break label_15;
      }
      n = MemberExpressionPart(true);
                                                                                        replaceName(n);
    }
                                                                                                            {if (true) return productionEndTerminal("AllocationExpressionInternal","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Arguments(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DELETE:
    case FUNCTION:
    case NEW:
    case THIS:
    case TYPEOF:
    case VOID:
    case LBRACE:
    case LPAREN:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case INCR:
    case DECR:
    case BANG:
    case TILDE:
    case DECIMAL_LITERAL:
    case HEX_INTEGER_LITERAL:
    case NULL_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER_NAME:
    case REGULAR_EXPRESSION_LITERAL:
      n = ArgumentList(true);
                                   replaceName(n);
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                                                          {if (true) return productionEndTerminal("Arguments","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ArgumentList(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Argument(true);
                          replaceName(n);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_16;
      }
      jj_consume_token(COMMA);
      n = Argument(true);
                                                                  replaceName(n);
    }
                                                                                      {if (true) return productionEndTerminal("ArgumentList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Argument(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_27(2147483647)) {
      n = AssignmentExpression(true);
                                                                        replaceName(n);
                                                                                          {if (true) return productionEndTerminal("Argument1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case LPAREN:
        n = FunctionExpression(true);
                                    replaceName(n);
                                                      {if (true) return productionEndTerminal("Argument2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CallExpressionPart(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      n = Arguments(true);
                           replaceName(n);
                                             {if (true) return productionEndTerminal("CallExpressionPart1","-","-","Replacement","Default",first,token);}
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      n = Expression(true);
                                replaceName(n);
      jj_consume_token(RBRACKET);
                                                      {if (true) return productionEndTerminal("CallExpressionPart2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[39] = jj_gen;
      if (jj_2_28(2)) {
        jj_consume_token(DOT);
        n = Id(true);
                                     replaceName(n);
                                                       {if (true) return productionEndTerminal("CallExpressionPart3","-","-","Replacement","Default",first,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          jj_consume_token(CATCH);
                     {if (true) return productionEndTerminal("CallExpressionPart4","-","-","Replacement","Default",first,token);}
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AssignmentOperator(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
              {if (true) return productionEndTerminal("AssignmentOperator1","-","-","Replacement","Default",first,token);}
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
               {if (true) return productionEndTerminal("AssignmentOperator2","-","-","Replacement","Default",first,token);}
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
               {if (true) return productionEndTerminal("AssignmentOperator3","-","-","Replacement","Default",first,token);}
      break;
    case REMASSIGN:
      jj_consume_token(REMASSIGN);
               {if (true) return productionEndTerminal("AssignmentOperator4","-","-","Replacement","Default",first,token);}
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
               {if (true) return productionEndTerminal("AssignmentOperator5","-","-","Replacement","Default",first,token);}
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
               {if (true) return productionEndTerminal("AssignmentOperator6","-","-","Replacement","Default",first,token);}
      break;
    case LSHIFTASSIGN:
      jj_consume_token(LSHIFTASSIGN);
                {if (true) return productionEndTerminal("AssignmentOperator7","-","-","Replacement","Default",first,token);}
      break;
    case RSIGNEDSHIFTASSIGN:
      jj_consume_token(RSIGNEDSHIFTASSIGN);
                {if (true) return productionEndTerminal("AssignmentOperator8","-","-","Replacement","Default",first,token);}
      break;
    case RUNSIGNEDSHIFTASSIGN:
      jj_consume_token(RUNSIGNEDSHIFTASSIGN);
                 {if (true) return productionEndTerminal("AssignmentOperator9","-","-","Replacement","Default",first,token);}
      break;
    case ANDASSIGN:
      jj_consume_token(ANDASSIGN);
               {if (true) return productionEndTerminal("AssignmentOperator10","-","-","Replacement","Default",first,token);}
      break;
    case XORASSIGN:
      jj_consume_token(XORASSIGN);
               {if (true) return productionEndTerminal("AssignmentOperator11","-","-","Replacement","Default",first,token);}
      break;
    case ORASSIGN:
      jj_consume_token(ORASSIGN);
               {if (true) return productionEndTerminal("AssignmentOperator12","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ConditionalExpression(boolean inTerminal) throws ParseException {
                                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = LogicalORExpression(true);
                                     replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      n = ConditionalExpressionInternal(true);
                                                                                              replaceName(n);
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
                                                                                                                 {if (true) return productionEndTerminal("ConditionalExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ConditionalExpressionInternal(boolean inTerminal) throws ParseException {
                                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(HOOK);
    n = TernaryExpression(true);
                                       replaceName(n);
    jj_consume_token(COLON);
    n = TernaryExpression(true);
                                                                                       replaceName(n);
                                                                                                         {if (true) return productionEndTerminal("ConditionalExpressionInternal","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TernaryExpression(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_29(2147483647)) {
      n = AssignmentExpression(true);
                                                                        replaceName(n);
                                                                                          {if (true) return productionEndTerminal("TernaryExpression1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case LPAREN:
        n = FunctionExpression(true);
                                    replaceName(n);
                                                      {if (true) return productionEndTerminal("TernaryExpression2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo LogicalORExpression(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_30(2147483647)) {
      n = LogicalANDExpression(true);
                                                                                                  replaceName(n);
      jj_consume_token(SC_OR);
      n = FunctionExpression(true);
                                                                                                                                                    replaceName(n);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SC_OR:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_17;
        }
        jj_consume_token(SC_OR);
        n = LogicalANDExpression(true);
                                                                                                                                                                                                         replaceName(n);
      }
                                                                                                                                                                                                                             {if (true) return productionEndTerminal("LogicalORExpression1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELETE:
      case NEW:
      case THIS:
      case TYPEOF:
      case VOID:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
        n = LogicalANDExpression(true);
                                      replaceName(n);
        label_18:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SC_OR:
            ;
            break;
          default:
            jj_la1[45] = jj_gen;
            break label_18;
          }
          jj_consume_token(SC_OR);
          n = LogicalANDExpression(true);
                                                                                           replaceName(n);
        }
                                                                                                               {if (true) return productionEndTerminal("LogicalORExpression2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo LogicalANDExpression(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_31(2147483647)) {
      n = BitwiseORExpression(true);
                                                                                                replaceName(n);
      jj_consume_token(SC_AND);
      n = FunctionExpression(true);
                                                                                                                                                  replaceName(n);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SC_AND:
          ;
          break;
        default:
          jj_la1[47] = jj_gen;
          break label_19;
        }
        jj_consume_token(SC_AND);
        n = BitwiseORExpression(true);
                                                                                                                                                                                                      replaceName(n);
      }
                                                                                                                                                                                                                          {if (true) return productionEndTerminal("LogicalANDExpression1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELETE:
      case NEW:
      case THIS:
      case TYPEOF:
      case VOID:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
        n = BitwiseORExpression(true);
                                     replaceName(n);
        label_20:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SC_AND:
            ;
            break;
          default:
            jj_la1[48] = jj_gen;
            break label_20;
          }
          jj_consume_token(SC_AND);
          n = BitwiseORExpression(true);
                                                                                         replaceName(n);
        }
                                                                                                             {if (true) return productionEndTerminal("LogicalANDExpression2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo BitwiseORExpression(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = BitwiseXORExpression(true);
                                      replaceName(n);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_21;
      }
      jj_consume_token(BIT_OR);
      n = BitwiseXORExpression(true);
                                                                                          replaceName(n);
    }
                                                                                                              {if (true) return productionEndTerminal("BitwiseORExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo BitwiseXORExpression(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = BitwiseANDExpression(true);
                                      replaceName(n);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_22;
      }
      jj_consume_token(XOR);
      n = BitwiseANDExpression(true);
                                                                                          replaceName(n);
    }
                                                                                                              {if (true) return productionEndTerminal("BitwiseXORExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo BitwiseANDExpression(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = EqualityExpression(true);
                                    replaceName(n);
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_23;
      }
      jj_consume_token(BIT_AND);
      n = EqualityExpression(true);
                                                                                      replaceName(n);
    }
                                                                                                          {if (true) return productionEndTerminal("BitwiseANDExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo EqualityExpression(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = RelationalExpression(true);
                                      replaceName(n);
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
      case SEQ:
      case SNEQ:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_24;
      }
      n = EqualityExpressionInternal(true);
                                                                                            replaceName(n);
    }
                                                                                                                {if (true) return productionEndTerminal("EqualityExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo EqualityExpressionInternal(boolean inTerminal) throws ParseException {
                                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = EqualityOperator(true);
                                  replaceName(n);
    n = RelationalExpression(true);
                                                                                 replaceName(n);
                                                                                                   {if (true) return productionEndTerminal("EqualityExpressionInternal","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo EqualityOperator(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
               {if (true) return productionEndTerminal("EqualityOperator1","-","-","Replacement","Default",first,token);}
      break;
    case NE:
      jj_consume_token(NE);
               {if (true) return productionEndTerminal("EqualityOperator2","-","-","Replacement","Default",first,token);}
      break;
    case SEQ:
      jj_consume_token(SEQ);
                {if (true) return productionEndTerminal("EqualityOperator3","-","-","Replacement","Default",first,token);}
      break;
    case SNEQ:
      jj_consume_token(SNEQ);
                {if (true) return productionEndTerminal("EqualityOperator4","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RelationalExpression(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = ShiftExpression(true);
                                 replaceName(n);
    label_25:
    while (true) {
      if (jj_2_32(2)) {
        ;
      } else {
        break label_25;
      }
      n = RelationalExpressionInternal(true);
                                                                                                      replaceName(n);
    }
                                                                                                                          {if (true) return productionEndTerminal("RelationalExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RelationalExpressionInternal(boolean inTerminal) throws ParseException {
                                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = RelationalOperator(true);
                                    replaceName(n);
    n = ShiftExpression(true);
                                                                              replaceName(n);
                                                                                                {if (true) return productionEndTerminal("RelationalExpressionInternal","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RelationalOperator(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      jj_consume_token(LT);
              {if (true) return productionEndTerminal("RelationalOperator1","-","-","Replacement","Default",first,token);}
      break;
    case GT:
      jj_consume_token(GT);
              {if (true) return productionEndTerminal("RelationalOperator2","-","-","Replacement","Default",first,token);}
      break;
    case LE:
      jj_consume_token(LE);
               {if (true) return productionEndTerminal("RelationalOperator3","-","-","Replacement","Default",first,token);}
      break;
    case GE:
      jj_consume_token(GE);
               {if (true) return productionEndTerminal("RelationalOperator4","-","-","Replacement","Default",first,token);}
      break;
    case INTANCE_OF:
      jj_consume_token(INTANCE_OF);
                       {if (true) return productionEndTerminal("RelationalOperator5","-","-","Replacement","Default",first,token);}
      break;
    case IN:
      jj_consume_token(IN);
               {if (true) return productionEndTerminal("RelationalOperator6","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ShiftExpression(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = AdditiveExpression(true);
                                    replaceName(n);
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
      case RSHIFT:
      case RUNSHIFT:
        ;
        break;
      default:
        jj_la1[56] = jj_gen;
        break label_26;
      }
      n = ShiftExpressionInternal(true);
                                                                                       replaceName(n);
    }
                                                                                                           {if (true) return productionEndTerminal("ShiftExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ShiftExpressionInternal(boolean inTerminal) throws ParseException {
                                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = ShiftOperator(true);
                               replaceName(n);
    n = AdditiveExpression(true);
                                                                            replaceName(n);
                                                                                              {if (true) return productionEndTerminal("ShiftExpressionInternal","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ShiftOperator(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSHIFT:
      jj_consume_token(LSHIFT);
               {if (true) return productionEndTerminal("ShiftOperator1","-","-","Replacement","Default",first,token);}
      break;
    case RSHIFT:
      jj_consume_token(RSHIFT);
               {if (true) return productionEndTerminal("ShiftOperator2","-","-","Replacement","Default",first,token);}
      break;
    case RUNSHIFT:
      jj_consume_token(RUNSHIFT);
                {if (true) return productionEndTerminal("ShiftOperator3","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AdditiveExpression(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = MultiplicativeExpression(true);
                                          replaceName(n);
    label_27:
    while (true) {
      if (jj_2_33(2)) {
        ;
      } else {
        break label_27;
      }
      n = AdditiveExpressionInternal(true);
                                                                                                             replaceName(n);
    }
                                                                                                                                 {if (true) return productionEndTerminal("AdditiveExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AdditiveExpressionInternal(boolean inTerminal) throws ParseException {
                                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = AdditiveOperator(true);
                                  replaceName(n);
    n = MultiplicativeExpression(true);
                                                                                     replaceName(n);
                                                                                                       {if (true) return productionEndTerminal("AdditiveExpressionInternal","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AdditiveOperator(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
              {if (true) return productionEndTerminal("AdditiveOperator1","-","-","Replacement","Default",first,token);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
              {if (true) return productionEndTerminal("AdditiveOperator2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo MultiplicativeExpression(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = UnaryExpression(true);
                                 replaceName(n);
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_28;
      }
      n = MultiplicativeExpressionInternal(true);
                                                                                             replaceName(n);
    }
                                                                                                                 {if (true) return productionEndTerminal("MultiplicativeExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo MultiplicativeExpressionInternal(boolean inTerminal) throws ParseException {
                                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = MultiplicativeOperator(true);
                                        replaceName(n);
    n = UnaryExpression(true);
                                                                                  replaceName(n);
                                                                                                    {if (true) return productionEndTerminal("MultiplicativeExpressionInternal","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo MultiplicativeOperator(boolean inTerminal) throws ParseException {
                                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      jj_consume_token(STAR);
              {if (true) return productionEndTerminal("MultiplicativeOperator1","-","-","Replacement","Default",first,token);}
      break;
    case SLASH:
      jj_consume_token(SLASH);
              {if (true) return productionEndTerminal("MultiplicativeOperator2","-","-","Replacement","Default",first,token);}
      break;
    case REM:
      jj_consume_token(REM);
              {if (true) return productionEndTerminal("MultiplicativeOperator3","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo UnaryExpression(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case THIS:
    case LBRACE:
    case LPAREN:
    case LBRACKET:
    case DECIMAL_LITERAL:
    case HEX_INTEGER_LITERAL:
    case NULL_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER_NAME:
    case REGULAR_EXPRESSION_LITERAL:
      n = PostfixExpression(true);
                                   replaceName(n);
                                                     {if (true) return productionEndTerminal("UnaryExpression1","-","-","Replacement","Default",first,token);}
      break;
    case DELETE:
    case TYPEOF:
    case VOID:
    case PLUS:
    case MINUS:
    case INCR:
    case DECR:
    case BANG:
    case TILDE:
      label_29:
      while (true) {
        n = UnaryExpressionInternal(true);
                                                       replaceName(n);
        if (jj_2_34(2)) {
          ;
        } else {
          break label_29;
        }
      }
                                                                           {if (true) return productionEndTerminal("UnaryExpression2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo UnaryExpressionInternal(boolean inTerminal) throws ParseException {
                                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = UnaryOperator(true);
                               replaceName(n);
    n = UnaryExpression(true);
                                                                         replaceName(n);
                                                                                           {if (true) return productionEndTerminal("UnaryExpressionInternal","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo UnaryOperator(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DELETE:
      jj_consume_token(DELETE);
                   {if (true) return productionEndTerminal("UnaryOperator1","-","-","Replacement","Default",first,token);}
      break;
    case VOID:
      jj_consume_token(VOID);
                 {if (true) return productionEndTerminal("UnaryOperator2","-","-","Replacement","Default",first,token);}
      break;
    case TYPEOF:
      jj_consume_token(TYPEOF);
                   {if (true) return productionEndTerminal("UnaryOperator3","-","-","Replacement","Default",first,token);}
      break;
    case INCR:
      jj_consume_token(INCR);
               {if (true) return productionEndTerminal("UnaryOperator4","-","-","Replacement","Default",first,token);}
      break;
    case DECR:
      jj_consume_token(DECR);
               {if (true) return productionEndTerminal("UnaryOperator5","-","-","Replacement","Default",first,token);}
      break;
    case PLUS:
      jj_consume_token(PLUS);
              {if (true) return productionEndTerminal("UnaryOperator6","-","-","Replacement","Default",first,token);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
              {if (true) return productionEndTerminal("UnaryOperator7","-","-","Replacement","Default",first,token);}
      break;
    case TILDE:
      jj_consume_token(TILDE);
              {if (true) return productionEndTerminal("UnaryOperator8","-","-","Replacement","Default",first,token);}
      break;
    case BANG:
      jj_consume_token(BANG);
              {if (true) return productionEndTerminal("UnaryOperator9","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PostfixExpression(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = LeftHandSideExpression(true);
                                        replaceName(n);
    if (jj_2_35(2)) {
      n = PostfixOperator(true);
                                                                                                replaceName(n);
    } else {
      ;
    }
                                                                                                                   {if (true) return productionEndTerminal("PostfixExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PostfixOperator(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      jj_consume_token(INCR);
               {if (true) return productionEndTerminal("PostfixOperator1","-","-","Replacement","Default",first,token);}
      break;
    case DECR:
      jj_consume_token(DECR);
               {if (true) return productionEndTerminal("PostfixOperator2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo IfStatement(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    n = Expression(true);
                                     replaceName(n);
    jj_consume_token(RPAREN);
    n = Statement(true);
                                                                             replaceName(n);
    if (jj_2_36(2)) {
      jj_consume_token(ELSE);
      n = Statement(true);
                                                                                                                                      replaceName(n);
    } else {
      ;
    }
                                                                                                                                                         {if (true) return productionEndTerminal("IfStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo IterationStatement(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DO:
      jj_consume_token(DO);
      n = Statement(true);
                                replaceName(n);
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      n = Expression(true);
                                                                                 replaceName(n);
      jj_consume_token(RPAREN);
      if (jj_2_37(2)) {
        jj_consume_token(SEMICOLON);
      } else {
        ;
      }
                                                                                                                                  {if (true) return productionEndTerminal("IterationStatement1","-","-","Replacement","Default",first,token);}
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      n = Expression(true);
                                        replaceName(n);
      jj_consume_token(RPAREN);
      n = Statement(true);
                                                                                replaceName(n);
                                                                                                  {if (true) return productionEndTerminal("IterationStatement2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[69] = jj_gen;
      if (jj_2_38(2147483647)) {
        jj_consume_token(FOR);
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELETE:
        case NEW:
        case THIS:
        case TYPEOF:
        case VOID:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case PLUS:
        case MINUS:
        case INCR:
        case DECR:
        case BANG:
        case TILDE:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:
          n = Expression(true);
                                                                                  replaceName(n);
          break;
        default:
          jj_la1[64] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELETE:
        case NEW:
        case THIS:
        case TYPEOF:
        case VOID:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case PLUS:
        case MINUS:
        case INCR:
        case DECR:
        case BANG:
        case TILDE:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:
          n = Expression(true);
                                                                                                                             replaceName(n);
          break;
        default:
          jj_la1[65] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELETE:
        case NEW:
        case THIS:
        case TYPEOF:
        case VOID:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case PLUS:
        case MINUS:
        case INCR:
        case DECR:
        case BANG:
        case TILDE:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:
          n = Expression(true);
                                                                                                                                                                        replaceName(n);
          break;
        default:
          jj_la1[66] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        n = Statement(true);
                                                                                                                                                                                                                 replaceName(n);
                                                                                                                                                                                                                                   {if (true) return productionEndTerminal("IterationStatement3","-","-","Replacement","Default",first,token);}
      } else if (jj_2_39(2147483647)) {
        jj_consume_token(FOR);
        jj_consume_token(LPAREN);
        jj_consume_token(VAR);
        n = VariableDeclarationList(true);
                                                                                                                  replaceName(n);
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELETE:
        case NEW:
        case THIS:
        case TYPEOF:
        case VOID:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case PLUS:
        case MINUS:
        case INCR:
        case DECR:
        case BANG:
        case TILDE:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:
          n = Expression(true);
                                                                                                                                                            replaceName(n);
          break;
        default:
          jj_la1[67] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELETE:
        case NEW:
        case THIS:
        case TYPEOF:
        case VOID:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case PLUS:
        case MINUS:
        case INCR:
        case DECR:
        case BANG:
        case TILDE:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:
          n = Expression(true);
                                                                                                                                                                                                       replaceName(n);
          break;
        default:
          jj_la1[68] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        n = Statement(true);
                                                                                                                                                                                                                                                replaceName(n);
                                                                                                                                                                                                                                                                  {if (true) return productionEndTerminal("IterationStatement4","-","-","Replacement","Default",first,token);}
      } else if (jj_2_40(2147483647)) {
        jj_consume_token(FOR);
        jj_consume_token(LPAREN);
        jj_consume_token(VAR);
        n = VariableDeclaration(true);
                                                                                                           replaceName(n);
        jj_consume_token(IN);
        n = Expression(true);
                                                                                                                                                     replaceName(n);
        jj_consume_token(RPAREN);
        n = Statement(true);
                                                                                                                                                                                             replaceName(n);
                                                                                                                                                                                                               {if (true) return productionEndTerminal("IterationStatement5","-","-","Replacement","Default",first,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOR:
          jj_consume_token(FOR);
          jj_consume_token(LPAREN);
          n = LeftHandSideExpression(true);
                                                  replaceName(n);
          jj_consume_token(IN);
          n = Expression(true);
                                                                                            replaceName(n);
          jj_consume_token(RPAREN);
          n = Statement(true);
                                                                                                                                    replaceName(n);
                                                                                                                                                      {if (true) return productionEndTerminal("IterationStatement6","-","-","Replacement","Default",first,token);}
          break;
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ContinueStatement(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(CONTINUE);
    if (jj_2_41(2)) {
      n = Id(true);
                                             replaceName(n);
    } else {
      ;
    }
    if (jj_2_42(2)) {
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
                                                                                           {if (true) return productionEndTerminal("ContinueStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo BreakStatement(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(BREAK);
    if (jj_2_43(2)) {
      n = Id(true);
                                          replaceName(n);
    } else {
      ;
    }
    if (jj_2_44(2)) {
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
                                                                                        {if (true) return productionEndTerminal("BreakStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ReturnStatement(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(RETURN);
    if (jj_2_45(2)) {
      n = ReturnExpression(true);
                                                         replaceName(n);
    } else {
      ;
    }
    if (jj_2_46(2)) {
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
                                                                                                       {if (true) return productionEndTerminal("ReturnStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ReturnExpression(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_47(2147483647)) {
      n = Expression(true);
                                                    replaceName(n);
                                                                      {if (true) return productionEndTerminal("ReturnExpression1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case LPAREN:
        n = FunctionExpression(true);
                                    replaceName(n);
                                                      {if (true) return productionEndTerminal("ReturnExpression2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo WithStatement(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(WITH);
    jj_consume_token(LPAREN);
    n = Expression(true);
                                       replaceName(n);
    jj_consume_token(RPAREN);
    n = Statement(true);
                                                                               replaceName(n);
                                                                                                 {if (true) return productionEndTerminal("WithStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo SwitchStatement(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
    n = Expression(true);
                                         replaceName(n);
    jj_consume_token(RPAREN);
    n = CaseBlock(true);
                                                                                 replaceName(n);
                                                                                                   {if (true) return productionEndTerminal("SwitchStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CaseBlock(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      n = CaseClauses(true);
                                  replaceName(n);
      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
    n = CaseBlockInternal(true);
                                                                               replaceName(n);
                                                                                                 {if (true) return productionEndTerminal("CaseBlock","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CaseBlockInternal(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACE:
      jj_consume_token(RBRACE);
              {if (true) return productionEndTerminal("CaseBlockInternal1","-","-","Replacement","Default",first,token);}
      break;
    case _DEFAULT:
      n = DefaultClause(true);
                               replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        n = CaseClauses(true);
                                                                      replaceName(n);
        break;
      default:
        jj_la1[73] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
                                                                                             {if (true) return productionEndTerminal("CaseBlockInternal2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CaseClauses(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_30:
    while (true) {
      n = CaseClause(true);
                             replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[75] = jj_gen;
        break label_30;
      }
    }
                                                 {if (true) return productionEndTerminal("CaseClauses","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CaseClause(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(CASE);
    n = Expression(true);
                                   replaceName(n);
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
    case CONTINUE:
    case DELETE:
    case FOR:
    case IF:
    case NEW:
    case RETURN:
    case THIS:
    case TYPEOF:
    case VAR:
    case VOID:
    case WHILE:
    case WITH:
    case DO:
    case SWITCH:
    case THROW:
    case TRY:
    case LBRACE:
    case LPAREN:
    case LBRACKET:
    case SEMICOLON:
    case PLUS:
    case MINUS:
    case INCR:
    case DECR:
    case BANG:
    case TILDE:
    case DECIMAL_LITERAL:
    case HEX_INTEGER_LITERAL:
    case NULL_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER_NAME:
    case REGULAR_EXPRESSION_LITERAL:
      n = StatementList(true);
                                                                                replaceName(n);
      break;
    default:
      jj_la1[76] = jj_gen;
      ;
    }
                                                                                                   {if (true) return productionEndTerminal("CaseClause","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo DefaultClause(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(_DEFAULT);
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
    case CONTINUE:
    case DELETE:
    case FOR:
    case IF:
    case NEW:
    case RETURN:
    case THIS:
    case TYPEOF:
    case VAR:
    case VOID:
    case WHILE:
    case WITH:
    case DO:
    case SWITCH:
    case THROW:
    case TRY:
    case LBRACE:
    case LPAREN:
    case LBRACKET:
    case SEMICOLON:
    case PLUS:
    case MINUS:
    case INCR:
    case DECR:
    case BANG:
    case TILDE:
    case DECIMAL_LITERAL:
    case HEX_INTEGER_LITERAL:
    case NULL_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER_NAME:
    case REGULAR_EXPRESSION_LITERAL:
      n = StatementList(true);
                                              replaceName(n);
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
                                                                 {if (true) return productionEndTerminal("DefaultClause","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ThrowStatement(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(THROW);
    n = Expression(true);
                                    replaceName(n);
    if (jj_2_48(2)) {
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
                                                                                 {if (true) return productionEndTerminal("ThrowStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TryStatement(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(TRY);
    n = Block(true);
                             replaceName(n);
    n = TryStatementInternal(true);
                                                                            replaceName(n);
                                                                                              {if (true) return productionEndTerminal("TryStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TryStatementInternal(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
      n = Finally(true);
                         replaceName(n);
                                           {if (true) return productionEndTerminal("TryStatementInternal1","-","-","Replacement","Default",first,token);}
      break;
    case CATCH:
      n = Catch(true);
                       replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINALLY:
        n = Finally(true);
                                                          replaceName(n);
        break;
      default:
        jj_la1[78] = jj_gen;
        ;
      }
                                                                             {if (true) return productionEndTerminal("TryStatementInternal2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Catch(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(CATCH);
    jj_consume_token(LPAREN);
    n = Id(true);
                                replaceName(n);
    jj_consume_token(RPAREN);
    n = Block(true);
                                                                    replaceName(n);
                                                                                      {if (true) return productionEndTerminal("Catch","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Finally(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(FINALLY);
    n = Block(true);
                                 replaceName(n);
                                                   {if (true) return productionEndTerminal("Finally","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  final private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CATCH)) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) return true;
    }
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_3R_191()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_192()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(_DEFAULT)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_scan_token(REGULAR_EXPRESSION_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_scan_token(NULL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_scan_token(BOOLEAN_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_scan_token(HEX_INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_214() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) return true;
    }
    return false;
  }

  final private boolean jj_3R_102() {
    Token xsp;
    if (jj_scan_token(58)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(58)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_102()) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_238() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_245()) jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_3R_238()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_250() {
    if (jj_3R_265()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) return true;
    }
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_224()) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_35()) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_275() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_274() {
    if (jj_3R_35()) return true;
    if (jj_3R_193()) return true;
    return false;
  }

  final private boolean jj_3R_273() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_264() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_273()) {
    jj_scanpos = xsp;
    if (jj_3R_274()) {
    jj_scanpos = xsp;
    if (jj_3R_275()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_101()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_264()) return true;
    return false;
  }

  final private boolean jj_3R_276() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_265() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_276()) return true;
    }
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_3R_234()) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_3R_189()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_250()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_223()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_3R_214()) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_3R_213()) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_3R_212()) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_145()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_144()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_35()) return true;
    if (jj_3R_193()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_39()) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_3R_39()) return true;
    if (jj_3R_193()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_143()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_142()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_137()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_140()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_35()) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_37()) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_3R_35()) return true;
    if (jj_3R_193()) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_37()) return true;
    if (jj_3R_38()) return true;
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_120()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_3R_175()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_3R_57()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_35()) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_33()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_3R_35()) return true;
    if (jj_3R_193()) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_3R_189()) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_203()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_3R_33()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_116()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_54()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_133()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_131()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_129()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_33()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_126()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_125()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_123()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_122()) return true;
    return false;
  }

  final private boolean jj_3R_259() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_121()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    Token xsp;
    if (jj_3_1()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_140() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_190()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_3R_33()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_209()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    return false;
  }

  final private boolean jj_3R_257() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  final private boolean jj_3R_258() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_272() {
    if (jj_3R_270()) return true;
    return false;
  }

  final private boolean jj_3_48() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_3R_205()) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_3R_137()) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_204()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_140()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) return true;
    }
    return false;
  }

  final private boolean jj_3R_285() {
    if (jj_3R_205()) return true;
    return false;
  }

  final private boolean jj_3R_270() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_282() {
    if (jj_3R_267()) return true;
    return false;
  }

  final private boolean jj_3R_271() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_256() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_263() {
    if (jj_3R_271()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_272()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_262() {
    if (jj_3R_270()) return true;
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_284() {
    if (jj_3R_205()) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_262()) {
    jj_scanpos = xsp;
    if (jj_3R_263()) return true;
    }
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_32()) return true;
    if (jj_3R_249()) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_57()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_48()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_281() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_284()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_283() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_285()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_280() {
    if (jj_3R_283()) return true;
    return false;
  }

  final private boolean jj_3R_267() {
    Token xsp;
    if (jj_3R_280()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_280()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_269() {
    if (jj_3R_281()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_282()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_268() {
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_260() {
    if (jj_3R_267()) return true;
    return false;
  }

  final private boolean jj_3R_255() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_261() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_268()) {
    jj_scanpos = xsp;
    if (jj_3R_269()) return true;
    }
    return false;
  }

  final private boolean jj_3R_248() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_260()) jj_scanpos = xsp;
    if (jj_3R_261()) return true;
    return false;
  }

  final private boolean jj_3_47() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_248()) return true;
    return false;
  }

  final private boolean jj_3_45() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(WITH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(IN)) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_258()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_259()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_255()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_256()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_257()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_3R_37()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  final private boolean jj_3R_246() {
    if (jj_3R_251()) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(TYPEOF)) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_scan_token(DELETE)) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_112()) return true;
    if (jj_3R_113()) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    Token xsp;
    if (jj_3_34()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_34()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_3R_202()) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) return true;
    }
    return false;
  }

  final private boolean jj_3R_279() {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  final private boolean jj_3R_278() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  final private boolean jj_3R_277() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_266() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_277()) {
    jj_scanpos = xsp;
    if (jj_3R_278()) {
    jj_scanpos = xsp;
    if (jj_3R_279()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_236() {
    if (jj_3R_240()) return true;
    return false;
  }

  final private boolean jj_3R_251() {
    if (jj_3R_266()) return true;
    if (jj_3R_113()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_3R_113()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_246()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) return true;
    }
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_110()) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_3R_111()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_254() {
    if (jj_scan_token(RUNSHIFT)) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_253() {
    if (jj_scan_token(RSHIFT)) return true;
    return false;
  }

  final private boolean jj_3R_252() {
    if (jj_scan_token(LSHIFT)) return true;
    return false;
  }

  final private boolean jj_3R_247() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_252()) {
    jj_scanpos = xsp;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_240() {
    if (jj_3R_247()) return true;
    if (jj_3R_161()) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_3R_231()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_161()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_236()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_scan_token(IN)) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_scan_token(INTANCE_OF)) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_200()) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_153()) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_108()) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_3R_109()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_scan_token(SNEQ)) return true;
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_scan_token(SEQ)) return true;
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_3R_237()) return true;
    if (jj_3R_215()) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_3R_215()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_216()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_3R_208()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_3R_200()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_201()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_48()) return true;
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_3R_153()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_154()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_106()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_3R_48()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_152()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_3R_47()) return true;
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_3R_48()) return true;
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_151()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_221()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_3R_47()) return true;
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_220()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_187() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) return true;
    }
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_222() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) return true;
    }
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_222()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_222()) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_3R_187()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(ORASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(XORASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(ANDASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(RUNSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(RSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(LSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(MINUSASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_191()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(PLUSASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(REMASSIGN)) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(SLASHASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(STARASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_3R_40()) return true;
    return false;
  }

  public JavaScriptMergeParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[80];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xfddc0000,0x0,0xfddc0000,0x0,0x0,0xfddc0000,0x40000000,0xbd5c0000,0xfddc0000,0x0,0x0,0x800000,0x0,0xb4100000,0x800000,0x0,0x0,0x800000,0x14000000,0x0,0x14000000,0x10000000,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0xb4900000,0x0,0x0,0x800000,0x0,0x0,0x0,0xb4900000,0x0,0x800000,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0xb4100000,0x0,0x0,0xb4100000,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0xb4100000,0xa0100000,0x0,0xb4100000,0xb4100000,0xb4100000,0xb4100000,0xb4100000,0x0,0x400000,0x800000,0x0,0x0,0x0,0x0,0xfd5c0000,0xfd5c0000,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x2578103,0x0,0x2578103,0x0,0x4000000,0x2578103,0x2000000,0x578103,0x2578103,0x4000000,0x0,0x100000,0x4000000,0x540000,0x100000,0x0,0x0,0x100000,0x540000,0x100000,0x540000,0x540000,0x0,0x4000000,0x4000000,0x100000,0x0,0x4000000,0x4000000,0x4540000,0x4000000,0x4000000,0x100000,0x0,0x400000,0x1000000,0x540000,0x4000000,0x100000,0x500000,0x1000000,0x0,0x0,0x100000,0x0,0x0,0x540000,0x0,0x0,0x540000,0x0,0x0,0x0,0x80000000,0x80000000,0x78000000,0x0,0x0,0x0,0x0,0x0,0x540000,0x0,0x0,0x540000,0x540000,0x540000,0x540000,0x540000,0x101,0x0,0x100000,0x4,0x4,0x80080,0x4,0x2578103,0x2578103,0x1000,0x1008,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x30318,0x0,0x30318,0x0,0x0,0x30318,0x0,0x30318,0x30318,0x0,0x400000,0x0,0x0,0x30318,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30318,0x0,0x0,0x0,0x0,0x0,0x0,0x30318,0x0,0x0,0x0,0x0,0xffc00000,0x100000,0x0,0x80000,0x80000,0x30318,0x40000,0x40000,0x30318,0x4000,0x8000,0x2000,0x7,0x7,0x0,0x1c00,0x1c00,0x18,0xe0,0xe0,0x30318,0x30318,0x300,0x30318,0x30318,0x30318,0x30318,0x30318,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30318,0x30318,0x0,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x201c88,0x200000,0x201c88,0x200000,0x0,0x201c88,0x0,0x201c88,0x201c88,0x0,0x0,0x0,0x0,0x201c88,0x0,0x200000,0x200000,0x0,0x201c88,0x0,0x201c88,0x201c88,0x201008,0x0,0x0,0x0,0x201008,0x0,0x0,0x201c88,0x0,0x0,0x0,0x1c88,0x0,0x0,0x201c88,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x201c88,0x0,0x0,0x201c88,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x201c88,0x0,0x0,0x201c88,0x201c88,0x201c88,0x201c88,0x201c88,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x201c88,0x201c88,0x0,0x0,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x4,0x0,0x4,0x0,0x0,0x4,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x4,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x4,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x4,0x4,0x4,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x4,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[48];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public JavaScriptMergeParser(CharStream stream) {
    token_source = new JavaScriptMergeParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JavaScriptMergeParser(JavaScriptMergeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(JavaScriptMergeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[132];
    for (int i = 0; i < 132; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 80; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 132; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 48; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
